api types
  1. private = within organization only

  2. partner = business exclusive (b2b, selected business partner)
               ex: imdb, instagram, facebook, googlemaps

  3. public = 3rd party, register to gain access easily
              has free and paid tiers
              ex: openweather, coinmarketcap

request = sent by client
response = sent by server

consumer = using api to get info
provider = provide info via api


Create -> post, [201 CREATED]
Read -> get, [200 OK] (list with paging or individual)
Update -> put, [204 + "resource updated successfully"]
Delete -> delete, [204 + "resource deleted successfully"]

serialization (from complex to common datatype)
deserialization (from common datatype to complex)

serializers:
  serializers.Serializer
  serializers.ModelSerializer

views:
  function based view
    @api_view (decorator)
  class based view
    APIView
      Generic Views
      Mixins
      Concrete View Classes
      ViewSet

relationships:
  one-to-one = models.OneToOneField(...)
  many-to-one = models.ForeignKey(...)
  many-to-many = models.ManyToManyField(...)


concrete view classes:
  using generic classes to simplify everything on the view


djongo = best mongodb driver
https://www.djongomapper.com/get-started/

ariadnegraphql = best graphql library for django (needs an asgi server like; uvicorn, daphne, hypercorn)
https://ariadnegraphql.org/docs/intro



permission = access restrictions (authZ, authorization)
           = user levels

authentication = proves identity and if valid user (authN)
               = logging in
               = BasicAuthentication (not recommended, only for testing purposes)
               = TokenAuthentication
               = SessionAuthentication


rest_framework_simplejwt.views.TokenObtainPairView
  Access Token = after 5min, gets destroyed and is regenerated using Refresh Token
  Refresh Token = validity 24hrs

using "access token" to access a restricted resource:
POST ... TokenObtainPairView
  Headers:
    key=Authorization
    value=Bearer <access token value from TokenObtainPairView>

using "refresh token" to create a new "access token":
POST ... TokenRefreshView
  Body:
    raw -> json
    {
      "refresh": "<refresh token value>"
    }

NOTE = check rest_framework_simplejwt documentation for better understanding


Throttling = restrict an IP depending on number of request per time



reset git specific commitId:
>>> git log
>>> git reset --hard <commidId>

>>> git rm --cached */__pycache__/*


>>> py -m venv menv
>>> menv\Scripts\activate
>>> pip install django
>>> pip freeze                        (check installed packages)
>>> django-admin startproject watchmate
>>> cd watchmate
>>> py manage.py startapp watchlist_app
>>> py manage.py migrate
>>> py manage.py createsuperuser
>>> pip install djangorestframework
>>> py manage.py makemigrations <app name>
>>> pip install djangorestframework_simplejwt